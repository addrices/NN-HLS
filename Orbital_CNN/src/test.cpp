//#define AP_INT_MAX_W 2048
#include "config.h"
#include <hls_stream.h>
#include <assert.h>
//#include "../../nn-h/FcnnLayer.h"
//#include "../../nn-h/util.h"
//#include "../../nn-h/conv.h"
//#include "../../nn-h/pooling.h"
#include "../../nn-h/conv_systolic.h"
using namespace std;

void ConvStreamGenerator_Batch_Test(){
	const unsigned Batch = 5;
	const int ABit = 4;
	const int InP = 4;

	ap_uint<ABit> IMG1[Batch][16][28][28];
	for(int a = 0;a < Batch;a++){
		for(int b = 0;b < 16;b++){
			for(int c = 0;c < 28;c++){
				for(int d =0;d < 28;d++){
					IMG1[a][b][c][d] = (a+b+c+d)%10;
				}
				//cout << endl;
			}
		}
	}


	hls::stream<ap_uint<Batch*ABit*InP> > in;
	hls::stream<ap_uint<Batch*ABit*InP> > out;
	ap_uint<Batch*ABit*InP> Temp;
	for(unsigned ipack = 0;ipack < 4;ipack++){
		for(unsigned a = 0;a < 28;a++){
			for(unsigned b = 0;b < 28;b++){
				for(unsigned ip = 0;ip < 4;ip++){
					for(unsigned bat = 0;bat < Batch;bat++){
						int offset = ip*Batch +bat;
						Temp((offset+1)*ABit-1,offset*ABit) = IMG1[bat][ipack*4+ip][a][b];
					}
				}
				in.write(Temp);
			}
		}
	}

	ConvStreamGenerator_Batch<Batch,3,28,16,4,ABit,1>(in,out,1);
	for(unsigned ipack = 0;ipack < 4;ipack++){
		for(int a = 0;a < 26;a++){
			for(int b = 0;b < 26;b++){
				for(int offa = 0;offa < 3;offa++){
					for(int offb = 0;offb < 3;offb++){
						ap_uint<Batch*ABit*4> Temp = out.read();
						for(unsigned ip = 0;ip < 4;ip++){
							for(int bat = 0;bat < Batch;bat++){
								unsigned offset = ip*Batch+bat;
								ap_uint<ABit> B = Temp((offset+1)*ABit-1,offset*ABit);
								if(B != IMG1[bat][ipack*4+ip][a+offa][b+offb]){
									cout << "bat " << bat << " a " << a << " b " << b << " offa " << offa << " offb " << offb << " str " << B << " img " << IMG1[bat][0][a+offa][b+offb] << endl;
									assert(0);
								}
							}
						}
					}
				}
			}
		}
	}
	cout << "good" << endl;
}

void ConvLayer_NoPad_Orbital_Test(){
	const unsigned Batch = 1;
	const unsigned InChannel = 1;
	const unsigned OutChannel = 1;
	const unsigned ABit = 4;
	const unsigned WBit = 8;
	const unsigned MBit = 12;
	const unsigned KSize =3;
	const unsigned Size = 28;
	const unsigned InP = 1;
	const unsigned OutP = 1;
	const unsigned MidP = 1;
	const unsigned Stride = 1;

	ap_uint<ABit> IMG1[Batch][InChannel][28][28] =
			{{{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}}};


	hls::stream<ap_uint<Batch*ABit*InP> > in_o,in;
	hls::stream<ap_uint<Batch*ABit*OutP> > out_o,out;
	for(int a = 0;a < Size;a++){
		for(int b = 0;b < Size;b++){
			in.write(IMG1[0][0][a][b]);
			in_o.write(IMG1[0][0][a][b]);
		}
	}
	ConvLayer_NoPad_Orbital<Batch,KSize,WBit,ABit,MBit,InChannel,OutChannel,Stride,Size,InP,MidP,OutP>(in_o,out_o,1);
}

int main(){
	ConvStreamGenerator_Batch_Test();
}

//
//struct ap_axis{
//	ap_uint<128> data;
//	ap_int<1> last;
//	ap_int<16> keep;
//};
//
//void top(hls::stream<ap_axis >& in,hls::stream<ap_axis >& out,unsigned reps = 1);
//int main(){
//	ap_uint<ABIT*C1_INCHANNEL> IMG1[C1_INCHANNEL][C1_SIZE][C1_SIZE] =
//	{{{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}};
//
//ap_uint<ABIT*C1_INCHANNEL> IMG2[C1_INCHANNEL][C1_SIZE][C1_SIZE] =
//	{{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0},
//	{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0},
//	{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0},
//	{0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0},
//	{0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0},
//	{0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
//	{0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},
//	{0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}};
//
//	hls::stream<ap_axis> in;
//	hls::stream<ap_axis> out;
//
//	ap_axis temp;
//
//	for(int i = 0; i < C1_INCHANNEL;i++){
//		for(int j = 0; j < 56;j++){
//			for(int k = 0; k < 14;k++){
//				int a = j/2;
//				int b = (j%2)*14+k;
//				temp.data((k+1)*8-1,k*8) = IMG1[i][a][b];
//				temp.keep(k,k) = 1;
//				if(j != 56-1){
//					temp.last = 0;
//				}
//				else{
//					temp.last = 0;
//				}
//			}
//			in.write(temp);
//		}
//	}
//	for(int i = 0; i < C1_INCHANNEL;i++){
//		for(int j = 0; j < 56;j++){
//			for(int k = 0; k < 14;k++){
//				int a = j/2;
//				int b = (j%2)*14+k;
//				temp.data((k+1)*8-1,k*8) = IMG2[i][a][b];
//				temp.keep(k,k) = 1;
//				if(j != 56-1){
//					temp.last = 0;
//				}
//				else{
//					temp.last = 1;
//				}
//			}
//			in.write(temp);
//		}
//	}
//
//
//
//	top(in,out,2);
//
//	for(int i = 0;i < 2;i++){
//		ap_axis OTemp = out.read();
//		for(int j = 0; j < 16;j++){
//			ap_uint<ABIT> q1 = OTemp.data((j+1)*8-5,j*8);
//			cout << q1 << " " ;
//		}
//		cout << endl;
//	}
//
////		for(int i = 0;i < 28;i++){
////			ap_axis OTemp = out.read();
////			for(int i = 0; i < 28;i++){
////				ap_uint<ABIT> q = OTemp.data((i+1)*ABIT-1,i*ABIT);
////				cout << q << " ";
////			}
////			cout << endl;
////		}
//}
