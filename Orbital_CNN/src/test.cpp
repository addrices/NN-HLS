//#define AP_INT_MAX_W 2048
#include "config.h"
#include <hls_stream.h>
#include "../../nn-h/FcnnLayer.h"
#include "../../nn-h/util.h"
#include "../../nn-h/conv.h"
#include "../../nn-h/pooling.h"
#include "../../nn-h/conv_systolic.h"
using namespace std;


int main(){
	ap_uint<4> a[2][9] = {{1,2,3,4,5,6,7,8,9},{1,2,3,4,5,6,7,8,9}};
	ap_int<8> w[3][9] = {{1,2,-3,4,5,-6,7,8,9},{1,2,3,4,-5,6,7,-8,-9},{1,-2,3,4,5,6,7,8,9}};

	ap_int<16> o[2][3];
	ap_int<16> o2[2][3];

	for(int i = 0;i < 2;i++)
		for(int j = 0;j < 3;j++)
			o[i][j] = 0;

	for(int i = 0;i < 2;i++)
		for(int j = 0;j < 3;j++)
			for(int k = 0;k < 9;k++)
				o[i][j] += a[i][k] * w[j][k];

	Orbital_Gemm<9,2,3,4,8,16>(a,w,o2);

	bool flag = true;
	for(int i = 0;i < 2;i++){
		for(int j = 0;j < 3;j++){
			if(o2[i][j] != o[i][j])
				flag = false;
			cout << o[i][j] << " ";
		}
		cout << endl;
	}
	for(int i = 0;i < 2;i++){
		for(int j = 0;j < 3;j++){
			cout << o2[i][j] << " ";
		}
		cout << endl;
	}

	if(flag)
		cout << "good" << endl;
	else
		cout << "bad" << endl;
}


//
//struct ap_axis{
//	ap_uint<128> data;
//	ap_int<1> last;
//	ap_int<16> keep;
//};
//
//void top(hls::stream<ap_axis >& in,hls::stream<ap_axis >& out,unsigned reps = 1);
//int main(){
//	ap_uint<ABIT*C1_INCHANNEL> IMG1[C1_INCHANNEL][C1_SIZE][C1_SIZE] =
//	{{{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}};
//
//ap_uint<ABIT*C1_INCHANNEL> IMG2[C1_INCHANNEL][C1_SIZE][C1_SIZE] =
//	{{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0},
//	{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0},
//	{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0},
//	{0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0},
//	{0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0},
//	{0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
//	{0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},
//	{0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}};
//
//	hls::stream<ap_axis> in;
//	hls::stream<ap_axis> out;
//
//	ap_axis temp;
//
//	for(int i = 0; i < C1_INCHANNEL;i++){
//		for(int j = 0; j < 56;j++){
//			for(int k = 0; k < 14;k++){
//				int a = j/2;
//				int b = (j%2)*14+k;
//				temp.data((k+1)*8-1,k*8) = IMG1[i][a][b];
//				temp.keep(k,k) = 1;
//				if(j != 56-1){
//					temp.last = 0;
//				}
//				else{
//					temp.last = 0;
//				}
//			}
//			in.write(temp);
//		}
//	}
//	for(int i = 0; i < C1_INCHANNEL;i++){
//		for(int j = 0; j < 56;j++){
//			for(int k = 0; k < 14;k++){
//				int a = j/2;
//				int b = (j%2)*14+k;
//				temp.data((k+1)*8-1,k*8) = IMG2[i][a][b];
//				temp.keep(k,k) = 1;
//				if(j != 56-1){
//					temp.last = 0;
//				}
//				else{
//					temp.last = 1;
//				}
//			}
//			in.write(temp);
//		}
//	}
//
//
//
//	top(in,out,2);
//
//	for(int i = 0;i < 2;i++){
//		ap_axis OTemp = out.read();
//		for(int j = 0; j < 16;j++){
//			ap_uint<ABIT> q1 = OTemp.data((j+1)*8-5,j*8);
//			cout << q1 << " " ;
//		}
//		cout << endl;
//	}
//
////		for(int i = 0;i < 28;i++){
////			ap_axis OTemp = out.read();
////			for(int i = 0; i < 28;i++){
////				ap_uint<ABIT> q = OTemp.data((i+1)*ABIT-1,i*ABIT);
////				cout << q << " ";
////			}
////			cout << endl;
////		}
//}
